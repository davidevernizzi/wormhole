"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var yargs_1 = __importDefault(require("yargs"));
var hideBin = require('yargs/helpers').hideBin;
var ethers = __importStar(require("ethers"));
var wormhole_sdk_1 = require("@certusone/wormhole-sdk");
wormhole_sdk_1.setDefaultWasm("node");
yargs_1.default(hideBin(process.argv))
    .command('cast_vote_on_evm', 'vote to enable / disable transaction processing', function (yargs) {
    return yargs
        .option('rpc', {
        alias: 'u',
        type: 'string',
        description: 'URL of the ETH RPC',
        default: "http://localhost:8545"
    })
        .option('bridge', {
        alias: 'b',
        type: 'string',
        description: 'Bridge address',
        default: "0x0290FB167208Af455bB137780163b7B7a9a10C16"
    })
        .option('key', {
        alias: 'k',
        type: 'string',
        description: 'Private key of the wallet',
        default: "0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d"
    })
        .option('authproof', {
        alias: 'a',
        type: 'string',
        description: 'Authorization proof of the guardian / wallet combination, generated by admintemplate.go, default is for the default wallet and devnet guardian-0',
        default: "0x5f7e2dc4c9d1f3a7d111cd3581e1f185b3cf5ea01ac07414576778218f977bc05c611ae24e6743faf45a5d47c33e34727326702b113a9eba69d18cbf81f217b201"
    })
        .option('vote', {
        describe: '"enable" or "disable", where disable will vote to disable transaction processing"',
        type: "string",
        required: true
    });
}, function (argv) { return __awaiter(void 0, void 0, void 0, function () {
    var provider, signer, t, tb, vote, enable, _a, _b, _c, _d, _e, _f, _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                provider = new ethers.providers.JsonRpcProvider(argv.rpc);
                signer = new ethers.Wallet(argv.key, provider);
                t = new wormhole_sdk_1.BridgeImplementation__factory(signer);
                tb = t.attach(argv.bridge);
                vote = argv.vote;
                enable = false;
                if (vote === "enable") {
                    enable = true;
                }
                else if (vote !== "disable") {
                    throw new Error("[" + vote + "] is an invalid vote, must be \"enable\" or \"disable\"");
                }
                console.log("Casting vote to " + vote + " transfers.");
                _b = (_a = console).log;
                _c = "Hash: ";
                return [4 /*yield*/, tb.castShutdownVote(argv.authproof, enable)];
            case 1:
                _b.apply(_a, [_c + (_h.sent()).hash]);
                _e = (_d = console).log;
                _f = "Transaction processing is currently ";
                return [4 /*yield*/, tb.enabledFlag()];
            case 2:
                _g = _f + ((_h.sent()) ? "enabled" : "disabled") + ", there are ";
                return [4 /*yield*/, tb.numVotesToShutdown()];
            case 3:
                _e.apply(_d, [_g + ((_h.sent()) + " votes to disable")]);
                return [2 /*return*/];
        }
    });
}); })
    .command('query_status_on_evm', 'query the current shutdown status', function (yargs) {
    return yargs
        .option('rpc', {
        alias: 'u',
        type: 'string',
        description: 'URL of the ETH RPC',
        default: "http://localhost:8545"
    })
        .option('bridge', {
        alias: 'b',
        type: 'string',
        description: 'Bridge address',
        default: "0x0290FB167208Af455bB137780163b7B7a9a10C16"
    })
        .option('key', {
        alias: 'k',
        type: 'string',
        description: 'Private key of the wallet',
        default: "0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d"
    });
}, function (argv) { return __awaiter(void 0, void 0, void 0, function () {
    var provider, signer, t, tb, numVotesToShutdown, _a, _b, _c, _d, voters, _i, voters_1, voter;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                provider = new ethers.providers.JsonRpcProvider(argv.rpc);
                signer = new ethers.Wallet(argv.key, provider);
                t = new wormhole_sdk_1.BridgeImplementation__factory(signer);
                tb = t.attach(argv.bridge);
                return [4 /*yield*/, tb.numVotesToShutdown()];
            case 1:
                numVotesToShutdown = _e.sent();
                _b = (_a = console).log;
                _c = "Current shutdown status: ";
                return [4 /*yield*/, tb.enabledFlag()];
            case 2:
                _d = _c +
                    ((_e.sent()) ? "enabled" : "disabled") +
                    ", numVotesToShutdown: " +
                    numVotesToShutdown +
                    ", requiredVotesToShutdown: ";
                return [4 /*yield*/, tb.requiredVotesToShutdown()];
            case 3:
                _b.apply(_a, [_d +
                        (_e.sent())]);
                if (!(numVotesToShutdown > 0)) return [3 /*break*/, 5];
                return [4 /*yield*/, tb.currentVotesToShutdown()];
            case 4:
                voters = _e.sent();
                for (_i = 0, voters_1 = voters; _i < voters_1.length; _i++) {
                    voter = voters_1[_i];
                    console.log("[" + voter + "] is voting to disable");
                }
                _e.label = 5;
            case 5: return [2 /*return*/];
        }
    });
}); })
    .command('listen_for_events_from_evm', 'listen for shutdown vote events', function (yargs) {
    return yargs
        .option('rpc', {
        alias: 'u',
        type: 'string',
        description: 'URL of the ETH RPC',
        default: "http://localhost:8545"
    })
        .option('token_bridge', {
        alias: 't',
        type: 'string',
        description: 'Token Bridge address',
        default: "0x0290FB167208Af455bB137780163b7B7a9a10C16"
    })
        .option('key', {
        alias: 'k',
        type: 'string',
        description: 'Private key of the wallet',
        default: "0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d"
    });
}, function (argv) { return __awaiter(void 0, void 0, void 0, function () {
    var bridge, provider, signer, t, tb;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, wormhole_sdk_1.importCoreWasm()];
            case 1:
                bridge = _a.sent();
                provider = new ethers.providers.JsonRpcProvider(argv.rpc);
                signer = new ethers.Wallet(argv.key, provider);
                t = new wormhole_sdk_1.BridgeImplementation__factory(signer);
                tb = t.attach(argv.token_bridge);
                console.log("Listening for shutdown vote events.");
                tb.on('ShutdownVoteCast', function (voter, votedToEnable, numVotesToShutdown, enabledFlag, rawEvent) {
                    console.log(new Date().toString() + ": ShutdownVoteCast:");
                    console.log("   voter: [" + voter);
                    console.log("   vote: " + votedToEnable);
                    console.log("   numVotesToShutdown: " + numVotesToShutdown);
                    console.log("   enabledFlag: " + enabledFlag);
                    console.log("   sourceBridge: " + rawEvent.address);
                    console.log("   txHash: " + rawEvent.transactionHash);
                    console.log("");
                });
                tb.on('ShutdownStatusChanged', function (enabledFlag, numVotesToShutdown, rawEvent) {
                    console.log(new Date().toString() + ": ShutdownStatusChanged:");
                    console.log("   enabledFlag: " + enabledFlag);
                    console.log("   numVotesToShutdown: " + numVotesToShutdown);
                    console.log("   sourceBridge: " + rawEvent.address);
                    console.log("   txHash: " + rawEvent.transactionHash);
                    console.log("");
                });
                return [2 /*return*/];
        }
    });
}); })
    .argv;
